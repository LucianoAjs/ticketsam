// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String?   @unique @db.VarChar(255)
  password     String?   @db.VarChar(255)
  birthdate    DateTime? @db.DateTime()
  firstName    String?   @db.VarChar(255)
  lastName     String?   @db.VarChar(255)
  cpf          String?   @unique @db.VarChar(255)
  phoneNumber  String?   @db.VarChar(255)
  gender       String?   @db.VarChar(255)
  DocumentType String?   @db.VarChar(255)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  address      Address?
  document     Document?
  boat         Boat[]
}

model Address {
  id           String   @id @default(uuid())
  userId       String?  @unique @db.VarChar(255)
  postalCode   String?  @db.VarChar(255)
  complement   String?  @db.VarChar(255)
  state        String?  @db.VarChar(255)
  city         String?  @db.VarChar(255)
  number       String?  @db.VarChar(255)
  neighborhood String?  @db.VarChar(255)
  street       String?  @db.VarChar(255)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], map: "Address_userId_fkey")

  @@index([userId], map: "Address_userId_fkey")
}

model Document {
  id                String   @id @default(uuid())
  userId            String?  @unique @db.VarChar(255)
  DocumentFrontUri  String?  @db.VarChar(255)
  DocumentBackUri   String?  @db.VarChar(255)
  DocumentSelfieUri String?  @db.VarChar(255)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User?    @relation(fields: [userId], references: [id], map: "Document_userId_fkey")

  @@index([userId], map: "Document_userId_fkey")
}

model Boat {
  id           String   @id @default(uuid())
  userId       String?  @db.VarChar(255)
  cnpj         String?  @unique @db.VarChar(255)
  IMO          Int?     @unique @db.Int
  name         String?  @db.VarChar(255)
  subscription Int?     @db.Int
  flag         String?  @db.VarChar(255)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Boat_userId_fkey")
  status       Status?
  ticket       Ticket[]

  @@index([userId], map: "Boat_userId_fkey")
}

model Status {
  id        String   @id @default(uuid())
  boatId    String?  @unique @db.VarChar(255)
  status    String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  boat Boat? @relation(fields: [boatId], references: [id], map: "Status_boatId_fkey")

  @@index([boatId], map: "Status_boatId_fkey")
}

model Ticket {
  id                 String    @id @default(uuid())
  boatId             String?   @db.VarChar(255)
  accommodation_name String?   @db.VarChar(255)
  destination_city   String?   @db.VarChar(255)
  home_city          String?   @db.VarChar(255)
  dt_arrival         DateTime? @db.DateTime()
  dt_modification    DateTime? @db.DateTime()
  dt_record          DateTime? @db.DateTime()
  dt_output          DateTime? @db.DateTime()
  boat_name          String?   @db.VarChar(255)
  boat_phone         String?   @db.VarChar(255)
  image_url          String?   @db.VarChar(255)
  remaining_quantity Int?      @db.Int
  food_value         Int?      @db.Int
  transport_value    Int?      @db.Int
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  boat               Boat?     @relation(fields: [boatId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Ticket_boatId_fkey")
  payment            Payment[]

  @@index([boatId], map: "Ticket_boatId_fkey")
}

model Payment {
  id        String   @id @default(uuid())
  ticketId  String?  @db.VarChar(255)
  paymentId String?  @unique @db.VarChar(255)
  status    String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticket    Ticket?  @relation(fields: [ticketId], references: [id], map: "Payment_ticketId_fkey")

  @@index([ticketId], map: "Payment_ticketId_fkey")
}
